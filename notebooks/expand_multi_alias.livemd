# Expand multi-alias syntax

## Introduction

**Note:** this document is a work in progress and uses the latest Sourceror version in the
main branch.

The multi-alias syntax `alias Foo.{Bar, Baz}`, while handy to alias multiple modules at once,
makes module uses harder to search for in large code bases, as mentioned by [credo](https://github.com/rrrene/credo)
warnings. We can use Sourceror to fix this issue by expanding this syntax into multiple
calls to `alias`, each in its own line.

To do so, we need to traverse the ast to find any ocurrence of a qualified tuple call(ie.
calls with the form `{:., meta, [left, :{}]}` as their first element) that is an argument
to an `:alias` call. Then for each module inside of the curly brackets, we need to join
the module segments from the left hand side with the ones in the right hand side, and
finally put them in a call to `:alias`.

Let's first start by installing Sourceror:

```elixir
Mix.install([
  # For latest published release:
  # {:sourceror, "~> 0.5"}

  {:sourceror, github: "doorgan/sourceror"}
])
```

And not lets parse an example:

```elixir
source = ~S"""
defmodule Foo do
  alias Foo.{Bar, Baz}
end
"""

quoted = Sourceror.parse_string!(source)
```

For the traversal part, we can use `Sourceror.postwalk/2`. Postwalk functions will go down
the tree to the deepest node, then to the sibling nodes, then to the parent node, and so
on until the whole tree is traversed. A way to think about it is that it traverses bottom
to top, or that child nodes are always visited first.

To convert a single alias into multiple ones, we need to extract the left side of the tuple
and join it with the elements inside of the tuple. For the left part, we can extract it from
the dot call we mentioned earlier. The first argument will always be the left hand side, and
the second one the atom `:{}`. The elements inside the tuple are just the arguments of the
qualified tuple call, ie the outer 3-tuple.

Each of these elements will be an `:__aliases__` call. In such calls, the arguments are the
segments of the module as regular atoms, so for example the segments for `Foo.Bar` will be
`[:Foo, :Bar]`. To create a module alias of the expanded `Foo.{Bar}`, we just need to join
the segments and put them in an `:__aliases__` call. Finally, that call needs to be wrapped in
a call to `:alias` to effectively create an `alias` expression.

Now we have a list of `:alias` calls, but the traversal function needs to return an AST node,
not just a list(that would be considered a list literal). We can work around this for now by
wrapping the aliases in a `:__block__` and returning that. In other contexts like macros this
would change the semantics of the code and it would not behave as we expect, but since we are
doing these manipulations to output code as text, we can afford to do it:

```elixir
postwalk_aliases = fn
  {:alias, _, [{{:., _, [left, :{}]}, _, right}]}, state ->
    {_, _, base} = left

    aliases =
      Enum.map(right, fn {_, _, segments} ->
        aliased = {:__aliases__, [], base ++ segments}
        {:alias, [], [aliased]}
      end)

    {{:__block__, [], aliases}, state}

  quoted, state ->
    {quoted, state}
end

Sourceror.postwalk(quoted, postwalk_aliases)
|> Sourceror.to_string()
|> IO.puts()
```

This works for now because it was just a single expression in the whole module, but it will break
as soon as we add more expressions:

```elixir
source = ~S"""
defmodule Foo do
  alias Foo.{Bar, Baz}
  42
end
"""

Sourceror.parse_string!(source)
|> Sourceror.postwalk(postwalk_aliases)
|> Sourceror.to_string()
|> IO.puts()
```

Because we wrapped the aliases in a block, if we add more expressions the expanded aliases will
be wrapped in parenthesis. This happens because `do` blocks contents are wrapped in a
`:__block__` whenever they have more than one expression, and what we are doing in our expansion
is putting a block inside another block, so the formatter will interpret that as a block
expression and will wrap it accordingly:

```elixir
Sourceror.parse_string!(~S"""
def foo do
  :ok
end
""")
|> IO.inspect(label: "Single expression")

Sourceror.parse_string!(~S"""
def foo do
  42
  :ok
end
""")
|> IO.inspect(label: "Multiple expressions")
```

One way to solve this issue is to mark our aliases block as a block that needs to be unwrapped
if it's inside another block. When traversing, if we encounter a block, we reduce its arguments
to unwrap any marked block, essentially "adding multiple nodes" to the block:

```elixir
expand_alias = fn {:alias, _, [{{:., _, [left, :{}]}, _, right}]} ->
  {_, _, base} = left

  aliases =
    Enum.map(right, fn {_, _, segments} ->
      aliased = {:__aliases__, [], base ++ segments}
      {:alias, [], [aliased]}
    end)

  aliases
end

unwrap_aliases = fn
  {:__block__, [unwrap_me?: true], aliases}, args ->
    args ++ aliases

  quoted, args ->
    args ++ [quoted]
end

postwalk_aliases = fn
  {:alias, _, [{{:., _, [_, :{}]}, _, _}]} = quoted, state ->
    aliases = expand_alias.(quoted)

    {{:__block__, [unwrap_me?: true], aliases}, state}

  {:__block__, meta, args}, state ->
    args = Enum.reduce(args, [], unwrap_aliases)

    {{:__block__, meta, args}, state}

  quoted, state ->
    {quoted, state}
end

Sourceror.parse_string!(source)
|> Sourceror.postwalk(postwalk_aliases)
|> Sourceror.to_string()
|> IO.puts()
```

## Handling comments

Great! Now that we have addressed this issue, there is one last problem we need to take care of.
In our current code we are completely ignoring the nodes metadata. This would be fine in most
cases if we were working with macros, but it becomes a big issue if we want to turn this AST
into formatted text. It is a problem for two reasons: first because we are discarding the
comments associated with the node, thus not respecting the original code, and second because
we are also discarding the nodes line numbers, which makes it impossible for the formatter to
know how to properly place comments.

This is easier to see with an example:

```elixir
~S"""
# Some comment
alias Foo.{Bar, Baz}
"""
|> Sourceror.parse_string!()
|> Sourceror.postwalk(postwalk_aliases)
|> Sourceror.to_string()
|> IO.puts()
```

The first issue is easy to avoid if we always remember to pass the metadata around. In this
particular example, due to the way Sourceror merges comments, we only need to preserve the alias
and the individual `:__aliases__` metadata. Moreover, we are adding nodes that should end in new
lines, so we need to also increment the line number for each alias we expand.

The other thing to keep is that we're getting rid of the first alias an starting anew with the right
side segments. But this first alias is the one that holds the leading comments for the first
expression, which means that if we discard it, we lose the comments right before the multi alias.
We can solve this by getting the index of the element, and if is the first then add the alias comments
to the expanded alias trailing comments:

```elixir
expand_alias = fn {:alias, alias_meta, [{{:., _, [left, :{}]}, _, right}]} ->
  {_, _, base} = left

  segments_length = length(right)

  aliases =
    right
    |> Enum.with_index(1)
    |> Enum.map(fn {segments, index} ->
      {_, meta, segments} = segments
      line = alias_meta[:line] + index
      meta = Keyword.put(meta, :line, line)

      meta =
        cond do
          index == 1 ->
            Keyword.update!(meta, :leading_comments, &(alias_meta[:leading_comments] ++ &1))

          index == segments_length ->
            # By setting the line number to 2 we can make sure there is always an empty
            # line after the group expanded aliases
            Keyword.put(meta, :end_of_expression, line: line, newlines: 2)

          true ->
            meta
        end

      aliased = {:__aliases__, [], base ++ segments}
      {:alias, meta, [aliased]}
    end)

  aliases
end

postwalk_aliases = fn
  {:alias, _, [{{:., _, [_, :{}]}, _, _}]} = quoted, state ->
    aliases = expand_alias.(quoted)

    {{:__block__, [unwrap_me?: true], aliases}, state}

  {:__block__, meta, args}, state ->
    args = Enum.reduce(args, [], unwrap_aliases)

    {{:__block__, meta, args}, state}

  quoted, state ->
    {quoted, state}
end

~S"""
# Some comment
alias Foo.{Bar, Baz}
"""
|> Sourceror.parse_string!()
|> Sourceror.postwalk(postwalk_aliases)
|> Sourceror.to_string()
|> IO.puts()
```

## Correcting line numbers

This solves the issue of the first comment, but what happens if we have more comments in disparate
places? Let's look at what happens with this code:

```elixir
~S"""
# Multi alias example
alias Foo.{ # Opening the multi alias
  Bar, # Here is Bar
  # Here come the Baz
  Baz.Qux, # With a Qux!
  F, G, H, I
}
# End of the file :)
"""
|> Sourceror.parse_string!()
|> Sourceror.postwalk(postwalk_aliases)
|> Sourceror.to_string()
|> IO.puts()
```

It seems to work fine even in that case. Now one last test: what happens if we have more expressions
after the aliases?

```elixir
source = ~S"""
alias Foo.{A, B, C, D, E, F}

# Comment for :hello
:hello
"""

source
|> Sourceror.parse_string!()
|> Sourceror.postwalk(postwalk_aliases)
|> Sourceror.to_string()
|> IO.puts()
```

The comment didn't get discarded, but it got misplaced.

When Sourceror extracts the comments from the AST to give them to the Elixir formatter, it gives them
the line number of the node they're attached to. Then when the formatter walks the ast and mixes it
with comments, it checks if its line number is equal or lesser than the next comment in the comments
list, and prints it if that is the case.

What is happening in our case is that the `:hello` is on line 4, but since we are incrementing the
line numbers of it's previous lines, we end up with something like this:

```
1 alias Foo.A
2 alias Foo.B
3 alias Foo.C
4 alias Foo.D
5 alias Foo.E
6 alias Foo.F
4 :hello
```

Because `alias Foo.D` and `:hello` nodes have a line number of `4`, the formatter will find
the `alias Foo.D` node first, see the `# Comment for :hello` comment at the tome with line
number 4, and print it for that node instead of printing it for `:hello`. This means that
whenever we do a transformation that involves changing a line number, we need to make
sure to propagate the live changes to the rest of the tree.

You may have noticed that in our postwalk function we receive two parameter: the first is
the current node we're visiting, and the second one is the *state* of the traversal. The
state is like the accumulator in the regular `Macro.postwalk/3` function, but in this case
it is a map with information that tells Sourceror what should be done while walking. One of
these fields is the `line_correction` field, which is used to tell Sourceror that line numbers
should be updated. Before visiting a node Sourceror will apply `Sourceror.correct_lines/2`
to it with the line correction in the state. We can use this feature to update the line numbers
of the subsequent nodes after we expand the multi alias.

One last thing we have to keep in mind is that the qualified tuple call will hold the trailing
comments of the curly brackets, so we need to get those and attach them to the last alias.

```elixir
expand_alias = fn {:alias, alias_meta, [{{:., _, [left, :{}]}, call_meta, right}]}, state ->
  {_, _, base} = left

  segments_length = length(right)

  aliases =
    right
    |> Enum.with_index(1)
    |> Enum.map(fn {segments, index} ->
      {_, meta, segments} = segments
      line = alias_meta[:line] + index

      {leading_comments, meta} = Keyword.pop(meta, :leading_comments, [])

      leading_comments = Enum.map(leading_comments, &%{&1 | line: line})

      meta =
        meta
        |> Keyword.put(:column, alias_meta[:column])
        |> Keyword.put(:line, line)
        |> Keyword.put(:leading_comments, leading_comments)

      aliased = {:__aliases__, [], base ++ segments}

      quoted = {:alias, meta, [aliased]}

      cond do
        index == 1 ->
          Sourceror.prepend_comments(quoted, alias_meta[:leading_comments])

        index == segments_length ->
          # Wrap the last one in a block so we can use the trailing comment
          trailing_comments = call_meta[:trailing_comments]

          quoted =
            {:__block__,
             [
               line: line,
               end_of_expression: [
                 line: line,
                 column: alias_meta[:column],
                 newlines: 2
               ]
             ], [quoted]}

          Sourceror.prepend_comments(quoted, trailing_comments, :trailing)

        true ->
          quoted
      end
    end)

  line_correction = state.line_correction + length(aliases)

  {aliases, %{state | line_correction: line_correction}}
end

postwalk_aliases = fn
  {:alias, _, [{{:., _, [_, :{}]}, _, _}]} = quoted, state ->
    {aliases, state} = expand_alias.(quoted, state)

    {{:__block__, [unwrap_me?: true], aliases}, state}

  {:__block__, meta, args}, state ->
    args = Enum.reduce(args, [], unwrap_aliases)

    {{:__block__, meta, args}, state}

  quoted, state ->
    {quoted, state}
end

source
|> Sourceror.parse_string!()
|> Sourceror.postwalk(postwalk_aliases)
|> Sourceror.to_string()
|> IO.puts()
```

And with this we now have a fully working function to expand occurrences of multi aliases, while
preserving comments associated to the correct nodes.

However, there are a lot of nuances when it comes to the way the Elixir formatter places comments,
and many of them will still end up misplaced, due to the fact that adding and removing comments to
a node requires propagating even more line corrections:

```elixir
source = ~S"""
defmodule Sample do
  # Some aliases
  alias Foo.{A, B, C, D, E, F}

  # Hello!
  alias Bar.{G, H, I,

    # Inner comment!
    # Inner comment 2!
    # Inner comment 3!
    J,

    # Comment for K!
    K # Comment for K 2!

    # Inner last comment!
    # Inner last comment 2!
  } # Not an inner comment

  def foo() do
    # Some scoped alias
    alias Baz.{A, B, C}

    # Just return :ok
    :ok

    # At the end
  end

  # Comment for :hello
  :hello
end
# End of file!
"""

source
|> Sourceror.parse_string!()
|> Sourceror.postwalk(postwalk_aliases)
|> Sourceror.to_string()
|> IO.puts()
```

While Sourceror does it's best to correct
line numbers for you, taking comments into account makes the code much more convoluted, forcing you
to do tricks with `Enum.reduce` instead of just using `Enum.map`, aggregating the total line
corrections that happened while enumerating child nodes, and so on.

To simplify this, you can pass the `collapse_comments: true` option to `Sourceror.to_string/2`. With
this option enabled, Sourceror will try to squash all comments line numbers into a single one, making
the line number of comments during transformation largely irrelevant. This relies on the fact that
the Elixir formatter goes through comments in order and only uses their line number and eol counts
to decide if

```elixir
source
|> Sourceror.parse_string!()
|> Sourceror.postwalk(postwalk_aliases)
|> Sourceror.to_string(collapse_comments: true)
|> IO.puts()
```
